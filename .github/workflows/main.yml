name: CI/CD for JobAIReplyBot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: registry.digitalocean.com/job-ai-reply-bot
  IMAGE_NAME: job-ai-reply-bot
  CONTAINER_NAME: job-ai-reply-bot
  LOGS_PATH: /root/job-ai-reply-bot/logs
  DEFAULT_CONNECTION: "'Server=job-ai-reply-db;Database=JobAIReplyBot;TrustServerCertificate=True;MultipleActiveResultSets=true;User Id=sa;Password=${{ secrets.SA_PASSWORD }};'"

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal
  
  build_and_push_image:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push'
    outputs:
      short_sha: ${{ steps.set_short_sha.outputs.short_sha }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Create short SHA
        id: set_short_sha
        run: |
          # Generate a short SHA from the current commit hash
          echo "short_sha=$(echo ${{ github.sha }} | head -c7)" >> $GITHUB_OUTPUT

      - name: Build container image
        run: |
          # Build the Docker image using the specified Dockerfile
          docker build -f src/DjinniAIReplyBot.Api/Dockerfile -t $REGISTRY/$IMAGE_NAME:${{ steps.set_short_sha.outputs.short_sha }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: |
          # Authenticate with DigitalOcean Container Registry
          doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: |
          # Push the Docker image to the DigitalOcean Container Registry
          docker push $REGISTRY/$IMAGE_NAME:${{ steps.set_short_sha.outputs.short_sha }}

  copy_files:
    runs-on: ubuntu-latest
    needs: build_and_push_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker-compose.prod.yml to server
        uses: appleboy/scp-action@v0.1.1
        with:
          # Copy the production Docker Compose file to the server
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/root/job-ai-reply-bot/"

  create_config:
    runs-on: ubuntu-latest
    needs:
      - copy_files
      - build_and_push_image
    env:
      ENV_FILE_PATH: .env
      SHORT_SHA: ${{ needs.build_and_push_image.outputs.short_sha }}
    steps:
      - name: Create configuration file on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: ENV_FILE_PATH,REGISTRY,IMAGE_NAME,SHORT_SHA,DEFAULT_CONNECTION
          script: |
            # Navigate to the application directory
            cd /root/job-ai-reply-bot

            # Create the .env file with required environment variables
            echo "DEFAULT_CONNECTION=${DEFAULT_CONNECTION}" > $ENV_FILE_PATH
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $ENV_FILE_PATH
            echo "AUTHOR_CHAT_ID=${{ secrets.AUTHOR_CHAT_ID }}" >> $ENV_FILE_PATH
            echo "CHAT_GPT_ACCESS_TOKEN=${{ secrets.CHAT_GPT_ACCESS_TOKEN }}" >> $ENV_FILE_PATH
            echo "SA_PASSWORD=" >> $ENV_FILE_PATH
            echo "NGROK_AUTH_TOKEN=${{ secrets.NGROK_AUTH_TOKEN }}" >> $ENV_FILE_PATH
            echo "REGISTRY=${REGISTRY}" >> $ENV_FILE_PATH
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $ENV_FILE_PATH
            echo "GITHUB_SHA=${SHORT_SHA}" >> $ENV_FILE_PATH

  deploy:
    runs-on: ubuntu-latest
    needs:
      - create_config
      - build_and_push_image
    env:
      SHORT_SHA: ${{ needs.build_and_push_image.outputs.short_sha }}
    steps:
      - name: Deploy to DigitalOcean droplet via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,IMAGE_NAME,SHORT_SHA
          script: |
            # Log in to Docker Registry on the server
            docker login -u "doctr" -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $REGISTRY

            # Navigate to the application directory
            cd /root/job-ai-reply-bot

            # Stop and remove any existing containers
            docker compose -f docker-compose.prod.yml down || true

            # Pull the latest image from the registry
            docker compose -f docker-compose.prod.yml pull

            # Start the services using the updated Docker Compose configuration
            docker compose -f docker-compose.prod.yml up -d
          debug: true
  
  set_webhook:
    runs-on: ubuntu-latest
    needs:
      - deploy
    env:
      NGROK_PORT: 4040
    steps:
      - name: Set Telegram Webhook with ngrok URL
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: TELEGRAM_BOT_TOKEN,NGROK_PORT
          script: |
            # Retrieve the public ngrok URL
            NGROK_URL=$(curl -s http://localhost:${NGROK_PORT}/api/tunnels | jq -r '.tunnels[0].public_url')

            # Construct the webhook URL for Telegram
            WEBHOOK_URL="${NGROK_URL}/api/telegram"

            # Set the webhook for the Telegram bot
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
                -d "url=$WEBHOOK_URL"
